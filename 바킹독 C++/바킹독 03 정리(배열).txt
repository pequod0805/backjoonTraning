
3강
배열의 특징 k번째의 원소를 탐색하는데 O(1)의 시간이 소요된다.
추가적으로 소모되는 메모리의 양(overhead)이 거의 없음(C++의 특성)
메모리상의 데이터들이 붙어 있어서 Cache Hit Rate가 높음(Cache hit rate)
메모리 상에 연속한 구간을 잡아야 해서 할당에 제약이 걸림

임의의 원소 확인, 원소 마지막 추가, 원소 마지막 삭제 = O(1) 
임의의 위치에 추가, 임의의 위치의 제거는 O(n) = 추가 후 나머지 값을 한칸 미뤄야함(데이터는 뒤에 있을 수록 시간이 줄어듬)
삽입
void insert(int idx, int num, int arr[], int& len){
   for(int i = len; i>idx;i--){
    arr[i]=arr[i-1];
   }
   arr[idx]=num;
   len++;
}
삭제
void erase(int idx, int arr[], int& len){
    for(int i = idx; i<len;i++){
        arr[i]=arr[i+1];
    }
    len--;
}

cstring의 memset을 사용하면 초기화 가능(memset때문에 비추)
for문으로 0으로 초기화
fill 함수를 이용해 초기화(가장 추천)
전역변수로 선언?(비추)

STL Vector
배열의 장점을 가지고 길이를 마음대로 늘이고 줄일 수 있다는 장점도 가지고 있음...
그래프의 인접 리스트에서 사용될 예정
STL Interator(따로 공부)

#include <bits/stdc++.h>
using namespace std;

int main(void) {
  vector<int> v1(3, 5); // {5,5,5};
  cout << v1.size() << '\n'; // 3
  v1.push_back(7); // {5,5,5,7};

  vector<int> v2(2); // {0,0};
  v2.insert(v2.begin()+1, 3); // {0,3,0};

  vector<int> v3 = {1,2,3,4}; // {1,2,3,4}
  v3.erase(v3.begin()+2); // {1,2,4};

  vector<int> v4; // {}
  v4 = v3; // {1,2,4} vector에서 "=" 은 deep copy를 실행하게 된다
  cout << v4[0] << v4[1] << v4[2] << '\n';
  v4.pop_back(); // {1,2}
  v4.clear(); // {}
}
//push_front, pop_front도 있음
//push_back, pop_back을 제외하면 모두 O(n)입니다.
//
//vector<int> v1 = {1,2,3,4,5}
//1. range-based for loop(since c++11)
// for(int e : v1) // int e : v1은 v1의 값에 영향을 주지 않음 하지만 int& e : v1으로 실행하면 값이 변경됨 << list, map, set에서도 모두 사용 가능
//   cout << e << ' ';
//
//2. not bad
// for(int i=0; i < v1.size(); i++)
//   cout << v1[i] << ' ';
//
//3. wrong // 이부분이 wrong인 이유는 v1이 빈 벡터일 경우 size()함수를 이용할 때 unsigned int가 입력되어 size()-1에서 오버플로우가 발생함.
// for(int i = 0; i < v1.size()-1; i++) 
//   cout << v1[i] << ' ';
//
1~n까지의 길이를 가지는 int arr[n]을 선언해서 해당 값 만들 보는 arr를 선언해서 기존에 나온 모든 값을 확인하는 시간을 단축할 수 있음
O(n) -> O(1)