스택은 한쪽 끝에서 원소를 넣거나 뺄 수 있는 자료구조(FILO)
큐, 덱도 스택처럼 특정 위치에서만 원소를 넣거나 빼는것에 제한이 있음(Restricted Structure)

원소의 추가 및 제거가 O(1), 맨위 원소 확인도 O(1)
원칙적으로 맨위의 원소에 대한 접근 이외에 작업은 불가능
STL stack에서도 이 기능은 없음
애초에 문제가 상단의 원소에 대한 접근으로 나옴

배열을 이용해 스택을 직접 구현하면
기본 스택 기능 이외에도 원소에 대한 확인 변경이 가능

스택은 배열, 연결리스트를 이용해 구현 가능
배열로 스택을 구현할 때 원소를 담을 큰 배열 한개와 인덱스를 저장할 변수 한개 가 필요

되도록이면 STL Stack을 씁시다

STL Pair? 쌍?...이런게 있구나...값과 위치를 동시에 표시하기 위한 쌍...
first는 높이 second는 위치를 등록하는데...좀 더 공부 필요

스택을 거의 다풀고 마지막 전까지 갔는데 벽을 만났고
혈투 전 내가 배운 내용을 일단 정리하려고 한다.
스택은 기본적으로 입려된 수를 오름차순 내림차순으로 정리할 때에
모노톤 알고리즘을 사용하여 진행하게 되는데.

스택에서 특정 값이 입력됬을 때 값이 비어있는지.empty로 확인한 뒤
Top값을 호출하고 입력된 값과 비교하여 <, >, <=, >=의 조건으로
top값을 pop해서 스택이 필요한 형상의 내림차순 또는 오름차순의 모습으로
작업이 종료될 때까지 업데이트하는 것을 목표로 한다

이것에 Pair< , >를 원소의 구조로 잡아서 주소를 기억하는 방법도 있었다
주로 쌍이 입력될 때 하나는 입력된 값, 다른 하나는 주소를 포함하고 있다

이렇게 값이 입력되면서 O(n)~O(n Log n)으로 해결 할 수 있게 로직을 작성하는 것이 목표

일단 단순히 모노톤 알고리즘을 이용한 오름차순, 내림차순 작성만 하면 골드 5 이하의 문제가 나오고
Pair< , >를 통해서 특정 값을 입력하고, pop 또는 top을 통해서 접근한 뒤 출력하면 골드 1~2
정렬 할 때 조건이 추가되고 각각의 값에 접근하여 복합적인 연산을 해야해서
경우를 파악하되 연산을 분산하지말고 컴팩트하게 짜야한다면
플래티넘 5정도의 문제가 나오는 것 같다

단순 내림차순을 통해 내려볼 수 있는 값을 찾아라...정도면 문제없을 것 같은데
Pair을 통한 복합 계산은 좀 벽이다.
이해하려고 1주일 정도 해봤는데 조건이나 흐름이 파악이 안된다.
문제가 어려워지면 불친절해진다, 알아서 하라는건가?
아니면 애초에 알고리즘이라는 영역이 고착화 되어 있는 걸 수도 있다.
암기로 대부분은 해결될 것 으로 예상된다?

같은 수가 연속해서 입력될 때