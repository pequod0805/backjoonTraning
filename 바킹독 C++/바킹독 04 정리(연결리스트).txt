연결리스트는 k번째 원소를 찾으려면 O(k)
임의의 위치에 원소를 추가/삭제가 O(1)
원소들이 메모리 상에 연속해 있지 않으 Cache Hit Rate가 낮지만 할당이 쉬움 

Cache Hit Rate
cache는 다음에 사이트를 재방문 할 때 해당 콘텐츠가 훨씬 빠르게 표시되도록 웹사이트의 데이터와 콘텐츠를 임시로 저장하는 고속 메모리, 데이터와 콘텐츠가 캐시메모리에 저장되는것을 "Caching"이라고 합니다.
캐시는 Ram,Rom과 CPU사이에 위치하며 자주 사용하는 프로그램과 데이터를 기억한다.
캐시 메모리는 메모리 계층 구조에서 가장 빠르다. 캐시를 자주 사용하면 ram을 찍지 않아 속도가 빨라짐
Cache Hit Ratio란 말 그대로 캐시가 적중되는 정도를 뜻합니다.

단일 연결리스트 = 후의 정보를 가지고 있음
이중연결 이스트 = 전과 후의 정보를 다 가지고 있음
원형 연결 리스트 = 마지막 원소가 처음 원소의 주소를 가지고 있음
트리 그래프 해쉬는 비선형
배열과 리스트는 선형 = 둘의 차이점은 추후 면접에 질문으로 나올 수 있음

배열, 연결 리스트
k원소 접근 O(1), O(k)
임의 위치 첨삭 O(N), O(1) //하지만 idx번째 위치에 num추가의 경우 ind를 찾는 과정에서 시간이 소요...
메모리 상의 배치 연속, 불연속
추가적으로 필요한 공간(overhead) - , O(n) // 리스트는 각 원소가 n에 비례하는 주소값을 뒤에 혹은 앞뒤로 가진다.
추가하고 싶은 위치의 주소를 알고 있다면 O(1)...(무슨말이지 << 구현이 필요, 메모장에서 커서를 통해 특정 구간을 첨삭하는 경우에 효과적임)
그저 다음 원소의 주소를 변경하고 해당 부분의 메모리를 회수 해야 메모리 누수가 없음

정석적으로 NODE구조체나 클래스를선언해서 원소가 생성될 때 동적 할당을 하는 방식 

struct NODE {
  struct NODE *prev, *next; // 이중 연결리스트
  int data;
}

손코딩에서는 필요하지만 코테에서는 비효율

STL list를 가져다 쓰면 되고 이건 Double Linked List의 형태를 가집니다.
다만 이건 STL List를 허용할 경우, 아닌경우 사용 불가능

이럴때를 위한 야매 연결 리스트
const int MX = 1000005;
int dat[MX], pre[MX], nxt[MX];
int unused = -1;

fill(pre, pre+MX, -1);
fill(nxt, nxt+MX, -1);
메모리 누수 때문에 실무에서는 사용 불가, 코테에서만 사용가능
dat = 실제 데이터 
pre는 이전 노드 nxt는 다음 노드// 각 원소의 값이 -1이면 이전 또는 다음 값은 없음
unused = 현제 사용되지 않는 인덱스. 즉, 새로운 원소가 들어갈 수 있는 인덱스를 얘기함. 원소가 추가된 이후 1씩 증가함
0번지는 연결리스트의 시작 원소로 고정되어 있습니다. 값이 들어가지 않고 시작점을 나타내기 위한 dummy node
현재 코드에는 길이정보를 두지 않았지만 길이가 필요하다면. len변수를 두고 원소가 추가될 때 1증가 삭제될 때 1감소시키면 됩니다.

travers 함수는 연결리스트의 모든 원소를 출력할 것임
travers(){
 int cur = nxt[0];
 while(nxt[cur] != -1){
  cout << dat[cur] << ' ':
  cur = nxt[cur];
 }
}
insert
1. 값이 들어갈 들어갈 새로운 원소를 생성한 뒤...(unused가 있는 값이 새로운 원소가 들어갈 공간)
2. 새 원소의 pre값에 삽입할 위치의 주소를 대입
3. 새 원소의 nxt값에 삽입할 위치의 nxt값을 대입
4. 삽입할 위치의 nxt 값과 삽입할 위치의 다음 원소의 pre값을 새원소로 변경
5. unused값 1증가(다음 unused값이 있는 값으로 변경...?)
delete
1. 다음 주소값의 pre값에 지우려는 원소값의 pre값을 대입
2. 이전 주소값의 nxt값에 지우려는 원소값의 nxt값을 대입
// 이 방법은 n = 100,000 ~ 1,000,000번 을 대상으로하는 코딩테스트 문제에서 사용가능
// 실무에서는 지워진 값에 대한 메모리 관리가 안되기 때문에 사용 불가능

#include <bits/stdc++.h>
using namespace std;

const int MX = 1000005;
int dat[MX], pre[MX], nxt[MX];
int unused = 1;

void insert(int addr, int num){
    dat[unused] = num;
    pre[unused] = addr;
    nxt[unused] = nxt[addr];
    if(nxt[addr] != -1) pre[nxt[addr]] = unused;
    nxt[addr] = unused;
    unused++;
}

void erase(int addr){
    nxt[pre[addr]] = nxt[addr];
    if(nxt[addr] != -1)pre[nxt[addr]] = pre[addr];
}

void traverse(){
  int cur = nxt[0];
  while(cur != -1){
    cout << dat[cur] << ' ';
    cur = nxt[cur];
  }
  cout << "\n\n";
}

void insert_test(){
  cout << "****** insert_test *****\n";
  insert(0, 10); // 10(address=1)
  traverse();
  insert(0, 30); // 30(address=2) 10
  traverse();
  insert(2, 40); // 30 40(address=3) 10
  traverse();
  insert(1, 20); // 30 40 10 20(address=4)
  traverse();
  insert(4, 70); // 30 40 10 20 70(address=5)
  traverse();
}

void erase_test(){
  cout << "****** erase_test *****\n";
  erase(1); // 30 40 20 70
  traverse();
  erase(2); // 40 20 70
  traverse();
  erase(4); // 40 70
  traverse();
  erase(5); // 40
  traverse();
}

int main(void) {
  fill(pre, pre+MX, -1);
  fill(nxt, nxt+MX, -1);
  insert_test();
  erase_test();
}